# -*- coding: utf-8 -*-
"""YOLOv8_DeepLearning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/116Lq3srna6CcElKlJb7EJ2n_byuh9Ovb

# Setup

Pip install `ultralytics` and [dependencies](https://github.com/ultralytics/ultralytics/blob/main/requirements.txt) and check software and hardware.
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install ultralytics
import ultralytics
ultralytics.checks()

"""# 1. Predict"""

# Run inference on an image with YOLOv8n
!yolo predict model=yolov8n.pt source='https://uploads-ssl.webflow.com/614c82ed388d53640613982e/63e64d406a16f2fbc558d84e_prediction%20with%20%20other%20parameters.jpg'

"""# 2. Val"""

# Download COCO val
import torch
torch.hub.download_url_to_file('https://ultralytics.com/assets/coco2017val.zip', 'tmp.zip')  # download (780M - 5000 images)
!unzip -q tmp.zip -d datasets && rm tmp.zip  # unzip

# Validate YOLOv8n on COCO8 val
!yolo val model=yolov8n.pt data=coco8.yaml

"""# 3. Train"""

# Commented out IPython magic to ensure Python compatibility.
#@title Select YOLOv8 ðŸš€ logger {run: 'auto'}
logger = 'Comet' #@param ['Comet', 'TensorBoard']

if logger == 'Comet':
#   %pip install -q comet_ml
  import comet_ml; comet_ml.init()
elif logger == 'TensorBoard':
#   %load_ext tensorboard
#   %tensorboard --logdir .

# Train YOLOv8n on COCO8 for 3 epochs
!yolo train model=yolov8n.pt data=coco8.yaml epochs=3 imgsz=640

"""# 4. Export"""

!yolo export model=yolov8n.pt format=torchscript

"""# 5. Python Usage"""

from ultralytics import YOLO

# Load a model
model = YOLO('yolov8n.yaml')  # build a new model from scratch
model = YOLO('yolov8n.pt')  # load a pretrained model (recommended for training)

# Use the model
results = model.train(data='coco128.yaml', epochs=3)  # train the model
results = model.val()  # evaluate model performance on the validation set
results = model('https://ultralytics.com/images/bus.jpg')  # predict on an image
results = model.export(format='onnx')  # export the model to ONNX format

"""# 6. Tasks

## 1. Detection
"""

# Load YOLOv8n, train it on COCO128 for 3 epochs and predict an image with it
from ultralytics import YOLO

model = YOLO('yolov8n.pt')  # load a pretrained YOLOv8n detection model
model.train(data='coco128.yaml', epochs=3)  # train the model
model('https://ultralytics.com/images/bus.jpg')  # predict on an image

"""## 2. Segmentation"""

# Load YOLOv8n-seg, train it on COCO128-seg for 3 epochs and predict an image with it
from ultralytics import YOLO

model = YOLO('yolov8n-seg.pt')  # load a pretrained YOLOv8n segmentation model
model.train(data='coco128-seg.yaml', epochs=3)  # train the model
model('https://ultralytics.com/images/bus.jpg')  # predict on an image

"""## 3. Classification"""

# Load YOLOv8n-cls, train it on mnist160 for 3 epochs and predict an image with it
from ultralytics import YOLO

model = YOLO('yolov8n-cls.pt')  # load a pretrained YOLOv8n classification model
model.train(data='mnist160', epochs=3)  # train the model
model('https://ultralytics.com/images/bus.jpg')  # predict on an image

"""## 4. Pose"""

# Load YOLOv8n-pose, train it on COCO8-pose for 3 epochs and predict an image with it
from ultralytics import YOLO

model = YOLO('yolov8n-pose.pt')  # load a pretrained YOLOv8n classification model
model.train(data='coco8-pose.yaml', epochs=3)  # train the model
model('https://ultralytics.com/images/bus.jpg')  # predict on an image

# Commented out IPython magic to ensure Python compatibility.
# Git clone and run tests on updates branch
!git clone https://github.com/ultralytics/ultralytics -b main
# %pip install -qe ultralytics

# Run tests (Git clone only)
!pytest ultralytics/tests

# Validate multiple models
for x in 'nsmlx':
  !yolo val model=yolov8{x}.pt data=coco.yaml